import os
import pandas as pd

import awswrangler as wr
import boto3
import requests
import tabula
import yaml

from database_utils import DatabaseConnector


class DataExtractor:
    '''
    A class that handles all the extraction of data from various sources.

    Methods:
    -------
    read_dbs_table(dbc, table_name)
        Reads table table_name from an engine generated by a database connector dbc and returns it as a dataframe.
    retrieve_pdf_data(link)
        Retrieves data from a pdf and returns it as a dataframe.
    list_number_of_stores(endpoint, header)
        Returns the number of stores from the stores database.
    retreive_stores_data(endpoint)
        Retrieves stores data from a given endpoint and returns it as a dataframe.
    extract_from_s3(str)
        Extracts data from a .csv file in an s3 bucket and returns it as a dataframe.
    extract_events_data(endpoint)
        Extracts events data from an s3 bucket and returns it as a dataframe.
    '''

    def read_rds_table(self, dbc: DatabaseConnector, table_name: str):
        '''
        Reads table from an engine generated by a database connector and returns it as a dataframe.

        Parameters
        ----------
        dbc : database_utils.DatabaseConnector
            A DatabaseConnector from which the data is extracted.
        table_name : str
            The name of the table that is to be read.
            
        Returns
        -------
        df: pd.Dataframe
            The dataframe containing the data from the table.
        '''
        engine = dbc.init_db_engine()
        return pd.read_sql_table(table_name, engine)

    def retrieve_pdf_data(self, link: str = 'https://data-handling-public.s3.eu-west-1.amazonaws.com/card_details.pdf'):
        '''
        Retrieves data from a pdf and returns it as a dataframe.

        Parameters
        ----------
        link : str
            The link to the pdf. It has a default link. Alternatively, a local path to a pdf can be used too.
            
        Returns
        -------
        df: pd.Dataframe
            The dataframe containing the data from the pdf.
        '''
        df_list = tabula.read_pdf(link, pages = 'all')
        df = pd.concat(df_list, ignore_index = True)
        return df
    
    def list_number_of_stores(self, endpoint: str, header: dict):
        '''
        Returns the number of stores from the stores database.

        Parameters
        ----------
        endpoint : str
            The endpoint where the database is located.
        header : dict
            a header containing the api-key.
            
        Returns
        -------
        int
            The number of entries in the database.
        '''
        response = requests.get(endpoint, headers=header)
        return response.json()['number_stores']
    
    def retrieve_stores_data(self, endpoint: str):
        '''
        Retrieves stores data from a given endpoint and returns it as a dataframe.

        Parameters
        ----------
        endpoint : str
            The endpoint containing the data. It has a default link.
            
        Returns
        -------
        df: pd.Dataframe
            The dataframe containing the stores data.
        '''
        abspath = os.path.dirname(__file__)
        api_keys_path = os.path.join(abspath, '..', 'yaml_files','api_keys.yaml')

        with open(api_keys_path,'r') as stream:
            header = yaml.safe_load(stream)
        number_of_stores = self.list_number_of_stores('https://aqj7u5id95.execute-api.eu-west-1.amazonaws.com/prod/number_stores', header)

        stores_list = []
        for i in range(0,number_of_stores):
            store_endpoint = endpoint + str(i)
            response = requests.get(store_endpoint, headers=header)
            stores_list.append(response.json())
        stores_data = pd.DataFrame(stores_list)
        return stores_data
    
    def extract_from_s3(self, address: str = 's3://data-handling-public/products.csv'):
        '''
        Extracts data from an s3 bucket and returns it as a dataframe.

        Parameters
        ----------
        address : str
            The s3 address containing the data. It has a default address.
            
        Returns
        -------
        df: pd.Dataframe
            The dataframe containing the data from the s3 bucket.
        '''
        s3 = boto3.client('s3')
        df = pd.read_csv(address)
        return df
    
    def extract_events_data(self, endpoint:str = 'https://data-handling-public.s3.eu-west-1.amazonaws.com/date_details.json'):
        '''
        Extracts events data from an s3 bucket and returns it as a dataframe.

        Parameters
        ----------
        endpoint : str
            The s3 address containing the data. It has a default endpoint.
            
        Returns
        -------
        df: pd.Dataframe
            The dataframe containing the data from the s3 bucket.
        '''
        response = requests.get('https://data-handling-public.s3.eu-west-1.amazonaws.com/date_details.json')
        df = pd.DataFrame(response.json())
        return df