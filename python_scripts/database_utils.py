import os
import pandas as pd

import yaml

from operator import itemgetter
from sqlalchemy import create_engine
from sqlalchemy import inspect

class DatabaseConnector:
    '''
    A class that handles various methods related to connecting to and communicating with databases.

    Methods:
    -------
    read_db_creds(credentials_file:str)
        Reads credentials for RDS database from the instance's YAML file and returns them as a dictionary.
    init_db_engine()
        Initialises the databse engine and returns it, using the credentials of the class instance.
    list_db_tables()
        Lists the names of all the tables in the database accessed by the enginee from init_db_engine.
    upload_to_db()
        Uploads a dataframe to a database defined in a local file `local_db_creds.yaml`, storing it as a table.
    '''

    def __init__(self, credentials_file:str = 'db_creds.yaml'):
        '''
        Initialises the class by choosing a credentials file.
        '''
        self.credentials_file =  credentials_file

    def read_db_creds(self):
        '''
        Reads credentials for RDS database from the instance's YAML file and returns them as a dictionary.

        Returns
        -------
        data_loaded : dict
            A dictionary containing the database credentials stored in the YAML file.
        '''
        with open(self.credentials_file) as stream:
            data_loaded = yaml.safe_load(stream)
        return data_loaded

    def init_db_engine(self):
        '''
        Initialises the database engine and returns it, using the credentials of the class instance.

        Returns
        -------
        engine : sqlalchemy.engine.base.Engine
            The database engine.
        '''
        credentials = self.read_db_creds()
        DATABASE_TYPE = 'postgresql'
        DBAPI = 'psycopg2'
        HOST, USER, PASSWORD, DATABASE, PORT = itemgetter('RDS_HOST', 'RDS_USER', 'RDS_PASSWORD', 'RDS_DATABASE', 'RDS_PORT')(credentials)
        
        engine = create_engine(f"{DATABASE_TYPE}+{DBAPI}://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}")
        return engine

    def list_db_tables(self):
        '''
        Lists the names of all the tables in the database accessed by the enginee from init_db_engine.

        Returns
        -------
        list
            A list containing all the table names from the engine generated by the credentials of the class.
        '''
        engine = self.init_db_engine()
        return inspect(engine).get_table_names()
    
    def upload_to_db(self, df: pd.DataFrame, table_name: str):
        '''
        Uploads a dataframe to a database defined in a local file `local_db_creds.yaml`, storing it as a table.

        Parameters
        ----------
        df: pd.Dataframe
            The dataframe to upload.
        table_name: str
            The name under which the table will be stored.
        '''
        abspath = os.path.dirname(__file__)
        credentials_path = os.path.join(abspath, '..', 'yaml_files','local_db_creds.yaml')
        
        with open(credentials_path) as stream:
            credentials = yaml.safe_load(stream)

        HOST, USER, PASSWORD, DATABASE, PORT, DATABASE_TYPE, DBAPI = itemgetter('HOST', 'USER', 'PASSWORD', 'DATABASE', 'PORT', 'DATABASE_TYPE', 'DBAPI')(credentials)
        engine = create_engine(f"{DATABASE_TYPE}+{DBAPI}://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}")

        df.to_sql(table_name, engine, if_exists='replace')